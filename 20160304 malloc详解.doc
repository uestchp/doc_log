 
malloc函数详解
2009-12-08 11:14 76421人阅读 评论(18) 收藏 举报
 分类：
 

版权声明：本文为博主原创文章，未经博主允许不得转载。
一、原型：extern void *malloc(unsigned int num_bytes);
头文件：#include <malloc.h> 或 #include <alloc.h> (注意：alloc.h 与 malloc.h 的内容是完全一致的。)
功能：分配长度为num_bytes字节的内存块
说明：如果分配成功则返回指向被分配内存的指针，否则返回空指针NULL。
当内存不再使用时，应使用free()函数将内存块释放。
 
举例：
[c-sharp] view plain copy
1. #include<stdio.h>  
2. #include<malloc.h>  
3. int main()  
4. {  
5.     char *p;  
6.    
7.     p=(char *)malloc(100);  
8.     if(p)  
9.         printf("Memory Allocated at: %x/n",p);  
10.     else  
11.         printf("Not Enough Memory!/n");  
12.     free(p);  
13.     return 0;  
14. }  
 
 
二、函数声明(函数原型)：
　　void *malloc(int size);
　　说明：malloc 向系统申请分配指定size个字节的内存空间。返回类型是 void* 类型。void* 表示未确定类型的指针。C,C++规定，void* 类型可以强制转换为任何其它类型的指针。这个在MSDN上可以找到相关的解释，具体内容如下：
     
malloc returns a void pointer to the allocated space, or NULL if there is insufficient memory available. To return a pointer to a type other than void, use a type cast on the return value. The storage space pointed to by the return value is guaranteed to be suitably aligned for storage of any type of object. If size is 0, malloc allocates a zero-length item in the heap and returns a valid pointer to that item. Always check the return from malloc, even if the amount of memory requested is small.
三、malloc与new的不同点
　　从函数声明上可以看出。malloc 和 new 至少有两个不同: new 返回指定类型的指针，并且可以自动计算所需要大小。比如：
      int *p;
　　p = new int; //返回类型为int* 类型(整数型指针)，分配大小为 sizeof(int);
　　或：
　　int* parr;
　　parr = new int [100]; //返回类型为 int* 类型(整数型指针)，分配大小为 sizeof(int) * 100;
　
　   而 malloc 则必须由我们计算要字节数，并且在返回后强行转换为实际类型的指针。
   　int* p;
　　p = (int *) malloc (sizeof(int));
 
　　第一、malloc 函数返回的是 void * 类型，如果你写成：p = malloc (sizeof(int)); 则程序无法通过编译，报错：“不能将 void* 赋值给 int * 类型变量”。所以必须通过 (int *) 来将强制转换。
　　第二、函数的实参为 sizeof(int) ，用于指明一个整型数据需要的大小。如果你写成：
　　int* p = (int *) malloc (1);
　　代码也能通过编译，但事实上只分配了1个字节大小的内存空间，当你往里头存入一个整数，就会有3个字节无家可归，而直接“住进邻居家”！造成的结果是后面的内存中原有数据内容全部被清空。
　　malloc 也可以达到 new [] 的效果，申请出一段连续的内存，方法无非是指定你所需要内存大小。
　　比如想分配100个int类型的空间：
　　int* p = (int *) malloc ( sizeof(int) * 100 ); //分配可以放得下100个整数的内存空间。
　　另外有一点不能直接看出的区别是，malloc 只管分配内存，并不能对所得的内存进行初始化，所以得到的一片新内存中，其值将是随机的。
　　除了分配及最后释放的方法不一样以外，通过malloc或new得到指针，在其它操作上保持一致。
 
 总结：
malloc()函数其实就在内存中找一片指定大小的空间，然后将这个空间的首地址范围给一个指针变量，这里的指针变量可以是一个单独的指针，也可以是一个数组的首地址，这要看malloc()函数中参数size的具体内容。我们这里malloc分配的内存空间在逻辑上连续的，而在物理上可以连续也可以不连续。对于我们程序员来说，我们关注的是逻辑上的连续，因为操作系统会帮我们安排内存分配，所以我们使用起来就可以当做是连续的。


malloc函数
 编辑
同义词 malloc一般指malloc函数
本词条缺少名片图，补充相关内容使词条更完整，还能快速升级，赶紧来编辑吧！
malloc 向系统申请分配指定size个字节的内存空间。返回类型是 void* 类型。void* 表示未确定类型的指针。C,C++规定，void* 类型可以强制转换为任何其它类型的指针。
函数定义
编辑
原型
1
extern void *malloc(unsigned int num_bytes);
头文件
1
2
#include <stdlib.h>
#include <malloc.h>
函数声明
1
void *malloc(size_t size);
备注：void* 表示未确定类型的指针，void *可以指向任何类型的数据，更明确的说是指申请内存空间时还不知道用户是用这段空间来存储什么类型的数据（比如是char还是int或者其他数据类型）。
功能
分配长度为num_bytes字节的内存块
返回值
如果分配成功则返回指向被分配内存的指针(此存储区中的初始值不确定)，否则返回空指针NULL。当内存不再使用时，应使用free()函数将内存块释放。函数返回的指针一定要适当对齐，使其可以用于任何数据对象。
说明
关于该函数的原型，在以前malloc返回的是char型指针，新的ANSIC标准规定，该函数返回为void型指针，因此必要时要进行类型转换。
名称解释
malloc的全称是memory allocation，中文叫动态内存分配，当无法知道内存具体位置的时候，想要绑定真正的内存空间，就需要用到动态的分配内存。
相关函数
calloc、realloc、free、_alloca
与new的区别
编辑
从本质上来说，malloc（Linux上具体实现可以参考man malloc，glibc通过brk()&mmap()实现）是libc里面实现的一个函数，如果在source code中没有直接或者间接include过stdlib.h，那么gcc就会报出error：‘malloc’ was not declared in this scope。如果生成了目标文件（假定动态链接malloc），如果运行平台上没有libc（Linux平台，手动指定LD_LIBRARY_PATH到一个空目录即可），或者libc中没有malloc函数，那么会在运行时（Run-time）出错。new则不然，是c++的关键字，它本身不是函数。new不依赖于头文件，c++编译器就可以把new编译成目标代码（g++4.6.3会向目标中插入_Znwm这个函数，另外，编译器还会根据参数的类型，插入相应的构造函数）。
在使用上，malloc 和 new 至少有两个不同: new 返回指定类型的指针，并且可以自动计算所需要大小。比如：
1
2
3
int *p;
p = new int;
//返回类型为int *类型(整数型指针)，分配大小为sizeof(int);
或：
1
2
3
int *parr;
parr = new int[100];
//返回类型为int *类型(整数型指针)，分配大小为sizeof(int) * 100;
而 malloc 则必须要由我们计算字节数，并且在返回后强行转换为实际类型的指针。
1
2
3
4
5
6
7
int *p;
p = (int*)malloc(sizeof(int) * 128);
//分配128个（可根据实际需要替换该数值）整型存储单元，
//并将这128个连续的整型存储单元的首地址存储到指针变量p中
double *pd = (double*)malloc(sizeof(double) * 12);
//分配12个double型存储单元，
//并将首地址存储到指针变量pd中
第一、malloc 函数返回的是 void * 类型。
对于C++，如果你写成：p = malloc (sizeof(int)); 则程序无法通过编译，报错：“不能将 void* 赋值给 int * 类型变量”。
所以必须通过 (int *) 来将强制转换。而对于C，没有这个要求，但为了使C程序更方便的移植到C++中来，建议养成强制转换的习惯。
第二、函数的实参为 sizeof(int) ，用于指明一个整型数据需要的大小。
在Linux中可以有这样：malloc(0),这是因为Linux中malloc有一个下限值16Bytes，注意malloc(-1)是禁止的；但是在某些系统中是不允许malloc(0)的。
在规范的程序中我们有必要按照这样的格式去使用malloc及free:
1
2
3
4
5
6
7
8
9
10
type *p;
if(NULL == (p = (type*)malloc(sizeof(type))))
/*请使用if来判断,这是有必要的*/
{
    perror("error...");
    exit(1);
}
.../*其它代码*/
free(p);
p = NULL;/*请加上这句*/
malloc 也可以达到 new [] 的效果，申请出一段连续的内存，方法无非是指定你所需要内存大小。
比如想分配100个int类型的空间：
1
2
int *p = (int*)malloc(sizeof(int) * 100);
//分配可以放得下100个整数的内存空间。
另外有一点不能直接看出的区别是，malloc 只管分配内存，并不能对所得的内存进行初始化，所以得到的一片新内存中，其值将是随机的。
除了分配及最后释放的方法不一样以外，通过malloc或new得到指针，在其它操作上保持一致。
对其做一个特例补充
1
2
3
4
5
char *ptr;
if((ptr = (char*)malloc(0)) == NULL)
    puts("Gotanullpointer");
else
    puts("Gotavalidpointer");
此时得到的是Got a valid pointer。把0赋给malloc能得到一个合法的指针。
工作机制
编辑
malloc函数的实质体现在，它有一个将可用的内存块连接为一个长长的列表的所谓空闲链表。调用malloc函数时，它沿连接表寻找一个大到足以满足用户请求所需要的内存块。然后，将该内存块一分为二（一块的大小与用户请求的大小相等，另一块的大小就是剩下的字节）。接下来，将分配给用户的那块内存传给用户，并将剩下的那块（如果有的话）返回到连接表上。调用free函数时，它将用户释放的内存块连接到空闲链上。到最后，空闲链会被切成很多的小内存片段，如果这时用户申请一个大的内存片段，那么空闲链上可能没有可以满足用户要求的片段了。于是，malloc函数请求延时，并开始在空闲链上翻箱倒柜地检查各内存片段，对它们进行整理，将相邻的小空闲块合并成较大的内存块。如果无法获得符合要求的内存块，malloc函数会返回NULL指针，因此在调用malloc动态申请内存块时，一定要进行返回值的判断。
Linux Libc6采用的机制是在free的时候试图整合相邻的碎片，使其合并成为一个较大的free空间。
程序示例
编辑
正常程序
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
typedef struct data_type{
 
 
int age;
     
 
char name[20];
 
 
}data;
 
 
data*bob=NULL;
   
     
bob=(data*)malloc(sizeof(data));
 
 
if(bob!=NULL)
{
 
 
bob->age=22;
         
 
strcpy(bob->name,"Robert");
 
         
printf("%sis%dyearsold\n",bob->name,bob->age);
 
 
}
    
     
else
 
{
 
printf("mallocerror!\n");
         
exit(-1);
 
}
     
     
free(bob);
 
bob=NULL;
内存泄漏实例
1
2
3
4
5
6
7
8
9
10
11
12
13
例1：
#include<stdio.h>
#include<malloc.h>
#defineMAX100000000
intmain(void)
{
int*a[MAX]={NULL};
inti;
for(i=0;i<MAX;i++){
a[i]=(int*)malloc(MAX);
}
return0;
}
例2：
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
#include"stdio.h"
 
#include"malloc.h"//malloc()函数被包含在malloc.h里面
 
 
int main(void)
{
 
char*a=NULL;//声明一个指向a的char*类型的指针
     
a=(char*)malloc(100*sizeof(char));//使用malloc分配内存的首地址，然后赋值给a
 
if(!a)//如果malloc失败，可以得到一些log
         
{
perror("malloc");
return-1;
}
 
sprintf(a,"%s","HelloWorld\n");//"HelloWorld\n"写入a指向的地址
     
printf("%s\n",a);//输出用户输入的数据
     
free(a);//释放掉使用的内存地址
 
return0;//例2有无内存泄露？
  
}
 
注：例1：对malloc申请之后没有检测返回值；例2：检测malloc返回值条件有误。


